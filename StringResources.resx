<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutSettingsLinkText" xml:space="preserve">
    <value>About</value>
    <comment>Text for about settings link</comment>
  </data>
  <data name="AboutText1" xml:space="preserve">
    <value>Bedside Clock is brought to you by Brave Location.

The weather data is from Yahoo Weather!, and the icons used are thanks to Gavin Elliott from happie.st</value>
    <comment>First text on about page</comment>
  </data>
  <data name="BraveLocationSiteLinkText" xml:space="preserve">
    <value>Brave Location Website</value>
    <comment>Link text to Brave Location website</comment>
  </data>
  <data name="BrighterButtonText" xml:space="preserve">
    <value>brighter</value>
    <comment>Text on brighter button</comment>
  </data>
  <data name="CloseButtonText" xml:space="preserve">
    <value>hide</value>
    <comment>Text on Close button</comment>
  </data>
  <data name="DimmedSettingsText" xml:space="preserve">
    <value>Dimmed</value>
    <comment>Label for dimmed settings switch</comment>
  </data>
  <data name="DimmerButtonText" xml:space="preserve">
    <value>dimmer</value>
    <comment>Text on dimmer button</comment>
  </data>
  <data name="ElliottLinkText" xml:space="preserve">
    <value>Gavin Elliott's Weather Icons</value>
    <comment>Link text to Gavin Elliott's website</comment>
  </data>
  <data name="FeedbackLinkText" xml:space="preserve">
    <value>Email Brave Location Team</value>
    <comment>Link text for feedback email</comment>
  </data>
  <data name="InitialLocationText" xml:space="preserve">
    <value>Searching ...</value>
    <comment>Initial text to show in location field</comment>
  </data>
  <data name="LocationButtonText" xml:space="preserve">
    <value>location</value>
    <comment>Text on location button</comment>
  </data>
  <data name="LocationNotFoundText" xml:space="preserve">
    <value>Location not found</value>
    <comment>Text to show when location not found</comment>
  </data>
  <data name="LocationServiceDisabledText" xml:space="preserve">
    <value>Location service disabled</value>
    <comment>Text when location service disabled</comment>
  </data>
  <data name="LocationSettingsText" xml:space="preserve">
    <value>Show Location</value>
    <comment>Label for location settings switch</comment>
  </data>
  <data name="PhaseOfMoonSettingsText" xml:space="preserve">
    <value>Show Phase of Moon</value>
    <comment>Label for moon settings switch</comment>
  </data>
  <data name="PowerOnCheckText" xml:space="preserve">
    <value>Charging?</value>
    <comment>Text to show on startup to ask if phone is charging up</comment>
  </data>
  <data name="PrivacySettingsLinkText" xml:space="preserve">
    <value>Privacy</value>
    <comment>Text for privacy settings link</comment>
  </data>
  <data name="PrivacyText1" xml:space="preserve">
    <value>Bedside Clock doesn't use your location data for anything other than displaying the location on the screen when requested.

The application uses Yahoo! PlaceFinder to try to turn the user's location into a place name. The privacy policy of Yahoo! can be found at Yahoo!'s Privacy Page.

This privacy policy was not written by a lawyer, but simply by the developers of the application, so if you have any questions or issues, please don't heistate to contact us.

The Brave Location Team</value>
    <comment>Text on privacy link</comment>
  </data>
  <data name="SettingsOKButtonText" xml:space="preserve">
    <value>OK</value>
    <comment>Text on OK settings button</comment>
  </data>
  <data name="SettingsTitleText" xml:space="preserve">
    <value>Settings</value>
    <comment>Title text on Settings page</comment>
  </data>
  <data name="WeatherSettingsText" xml:space="preserve">
    <value>Show Yahoo! Weather</value>
    <comment>Label for weather settings switch</comment>
  </data>
  <data name="YahooPrivacySiteLinkText" xml:space="preserve">
    <value>Yahoo! Privacy Website</value>
    <comment>Link text to Yahoo! Privacy website</comment>
  </data>
  <data name="YahooWeatherLinkText" xml:space="preserve">
    <value>Yahoo! Weather Website</value>
    <comment>Link text to Yahoo! Weather website</comment>
  </data>
</root>